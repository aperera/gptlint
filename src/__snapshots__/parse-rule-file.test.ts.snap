// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`parseRuleFile - fixtures/rules/empty-examples.md 1`] = `
{
  "desc": "This rule doesn't contain any examples which is fine because they are optional.",
  "message": "Example",
  "name": "example",
  "negativeExamples": [],
  "positiveExamples": [],
  "source": "fixtures/rules/empty-examples.md",
}
`;

exports[`parseRuleFile - fixtures/rules/force-list-pagination.md 1`] = `
{
  "desc": "Force the use of pagination for all lists in GraphQL.",
  "fixable": false,
  "languages": [
    "javascript",
    "typescript",
  ],
  "level": "error",
  "message": "Force List Pagination",
  "name": "force-list-pagination",
  "negativeExamples": [
    {
      "code": "type Query {
  items: [ItemConnection]
  requiredItems: [ItemConnection!]
  nestedRequireItems: [ItemConnection!]!
}",
      "language": "graphql",
    },
  ],
  "positiveExamples": [
    {
      "code": "type ListPaginationInput {
  first: Int
  last: Int
  after: String
  before: String
}

type Query {
  items(pagination: ): [ItemConnection]
  requiredItems: [ItemConnection!]
  nestedRequireItems: [ItemConnection!]!
}",
      "language": "graphql",
    },
  ],
  "source": "fixtures/rules/force-list-pagination.md",
  "tags": [
    "graphql",
  ],
}
`;

exports[`parseRuleFile - fixtures/rules/metadata-0.md 1`] = `
{
  "desc": "This example should parse correctly.",
  "eslint": [
    "example-eslint-rule-1",
    "example-eslint-rule-2",
  ],
  "fixable": false,
  "languages": [
    "javascript",
    "typescript",
  ],
  "level": "error",
  "message": "Example",
  "name": "example-name",
  "negativeExamples": [],
  "positiveExamples": [],
  "source": "fixtures/rules/metadata-0.md",
  "tags": [
    "general",
  ],
}
`;

exports[`parseRuleFile - fixtures/rules/metadata-1.md 1`] = `
{
  "desc": "This example should parse correctly because we stringify the values.",
  "eslint": [
    "example-eslint-rule-1",
    "@foo/example-eslint-rule-2",
  ],
  "fixable": false,
  "languages": [
    "javascript",
    "typescript",
  ],
  "level": "error",
  "message": "Example",
  "name": "example-name",
  "negativeExamples": [],
  "positiveExamples": [],
  "source": "fixtures/rules/metadata-1.md",
  "tags": [
    "general",
    "react",
  ],
}
`;

exports[`parseRuleFile - fixtures/rules/mutations.md 1`] = `
{
  "desc": "Disallow empty arguments for mutation Enforcing naming conventions for mutation input names and mutation return types.",
  "eslint": [
    "@ux-l_graphql-eslint/mutation-types",
  ],
  "fixable": false,
  "languages": [
    "javascript",
    "typescript",
  ],
  "level": "error",
  "message": "Mutation Inputs",
  "name": "mutation-types",
  "negativeExamples": [
    {
      "code": "type Mutation {
  setMessage(message: SetMessageInput, other: String): String
}
type Mutation {
  setMessage(message: String): String
}
type Mutation {
  setMessage: String
}
type Mutation {
  setMessage(input: setMessageInput): setMessageResponse
}",
      "language": "graphql",
    },
  ],
  "positiveExamples": [
    {
      "code": "type Mutation {
  setMessage(input: SetMessageInput): SetMessageResponse
}
type Mutation {
  setMessage(input: [SetMessageInput]): SetMessageResponse
}",
      "language": "graphql",
    },
  ],
  "source": "fixtures/rules/mutations.md",
  "tags": [
    "graphql",
  ],
}
`;

exports[`parseRuleFile - fixtures/rules/prefer-edge-node.md 1`] = `
{
  "desc": "Prefer usage of Edges and Nodes in GraphQL Lists.",
  "eslint": [
    "@ux-l_graphql-eslint/mutation-types",
  ],
  "fixable": false,
  "languages": [
    "javascript",
    "typescript",
  ],
  "level": "error",
  "message": "Prefer Edges & Nodes",
  "name": "prefer-edge-node",
  "negativeExamples": [
    {
      "code": "type Item {
  id: ID
  name: String
}

type Query {
  items: [Item]
  requiredItems: [Item!]
  nestedRequireItems: [Item!]!
}",
      "language": "graphql",
    },
  ],
  "positiveExamples": [
    {
      "code": "type Item {
  id: ID
  name: String
}

type ItemEdge {
  node: Node!
  cursor: String!
}

type ItemConnection {
  edges: [ItemEdge]
  pageInfo: PageInfo!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  resultCount: Int!
}

type Query {
  items: [ItemConnection]
  requiredItems: [ItemConnection!]
  nestedRequireItems: [ItemConnection!]!
}",
      "language": "graphql",
    },
  ],
  "source": "fixtures/rules/prefer-edge-node.md",
  "tags": [
    "graphql",
  ],
}
`;

exports[`parseRuleFile - fixtures/rules/prefer-page-queries.md 1`] = `
{
  "desc": "Warn on usage of the /utils/api.ts file in favor of creating a page query in the /utils/pageQueries folder.",
  "fixable": false,
  "languages": [
    "javascript",
    "typescript",
  ],
  "level": "error",
  "message": "Prefer page queries",
  "name": "prefer-page-queries",
  "negativeExamples": [
    {
      "code": "export const get<queryName>Data = async (
  locale: string
): Promise<<queryName>Type | null> => {
  try {
    const data = await fetchCmsGraphql(GET_<queryName>, {
      locale,
    });
    return data?.<queryName>?.data?.attributes || null;
  } catch (error) {
    console.error(error);
    return null;
  }
};",
      "language": "ts",
    },
  ],
  "positiveExamples": [
    {
      "code": "import { print } from 'graphql';
import {
  <queryName>Query,
  <queryName>QueryVariables,
} from './AboutUsPage.generated';
export type { <queryName>Query, <queryName>QueryVariables };
import QUERY from './AboutUsPage';
import { fetchCmsGraphql } from '../../fetchCmsData';

export const get<queryName>PageData = async (
  variables: <queryName>PageQueryVariables
): Promise<<queryName>Query | null> => {
  try {
    const data = await fetchCmsGraphql(print(QUERY), variables);
    return data as <queryName>Query;
  } catch (error) {
    console.error(error);
    return null;
  }
};",
      "language": "ts",
    },
    {
      "code": "import gql from 'graphql-tag'

export default gql\`
  query <queryName> {
    # query here
  }
\`",
      "language": "tsx",
    },
  ],
  "source": "fixtures/rules/prefer-page-queries.md",
  "tags": [
    "graphql",
  ],
}
`;

exports[`parseRuleFile - fixtures/rules/prefer-strapi-env-vars.md 1`] = `
{
  "desc": "Avoid accessing process.env variables in favor of Strapi environment variables.",
  "fixable": true,
  "languages": [
    "javascript",
    "typescript",
  ],
  "level": "error",
  "message": "Use Strapi Environment Variables",
  "name": "strapi-env-vars",
  "negativeExamples": [
    {
      "code": "export default ({ env }) => ({
  auth: {
    secret: process.env['ADMIN_JWT_SECRET']
  }
})",
      "language": "ts",
    },
    {
      "code": "export default ({ env }) => ({
  auth: {
    secret: process.env.ADMIN_JWT_SECRET
  }
})",
      "language": "ts",
    },
  ],
  "positiveExamples": [
    {
      "code": "export default ({ env }) => ({
  auth: {
    secret: env('ADMIN_JWT_SECRET')
  }
})",
      "language": "ts",
    },
  ],
  "source": "fixtures/rules/prefer-strapi-env-vars.md",
  "tags": [
    "code smells",
  ],
}
`;
